import time

from aiogram import types
from aiogram.dispatcher import FSMContext

from db import Users, UsersData, TimeUsers, UserFlag
from handlers.users.help import questionnarium
from keyboards import StartIKB
from loader import dp
from state import QuestionnaireState


@dp.message_handler(commands=['start'])
async def start(m: types.Message):
    if await Users.filter(tg_id=m.from_user.id).first() is None:
        await Users.create(tg_id=m.from_user.id)
    await m.answer('–û—Ç–∫—Ä–æ–π —Å–≤–æ–π —Ç–∞–±–∞—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ø–æ —Ñ—Ä–∞–Ω—à–∏–∑–µ TEPLO –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—Ç 150.000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü!',
                   reply_markup=StartIKB.ikb)
    await m.answer("–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –∫–æ–º–∞–Ω–¥–æ–π @dDevLabs")


@dp.callback_query_handler(text="write_data")
async def write_data(c: types.CallbackQuery, state: FSMContext):
    await c.message.answer(questionnarium["name"])
    await state.set_state(QuestionnaireState.name.state)


@dp.message_handler(state=QuestionnaireState.name)
async def name(m: types.Message, state: FSMContext):
    await state.update_data(name=m.text)
    await m.answer(questionnarium["contact_phone"])
    await state.set_state(QuestionnaireState.contact_phone.state)


@dp.message_handler(state=QuestionnaireState.contact_phone)
async def contact_phone(m: types.Message, state: FSMContext):
    await state.update_data(contact_phone=m.text)
    await m.answer(questionnarium["city_life"])
    await state.set_state(QuestionnaireState.city_life.state)


@dp.message_handler(state=QuestionnaireState.city_life)
async def city_life(m: types.Message, state: FSMContext):
    await state.update_data(city_life=m.text)
    await m.answer(questionnarium["city_open"])
    await state.set_state(QuestionnaireState.city_open.state)


@dp.message_handler(state=QuestionnaireState.city_open)
async def city_open(m: types.Message, state: FSMContext):
    await state.update_data(city_open=m.text)
    await m.answer(questionnarium["addition_info"])
    await state.set_state(QuestionnaireState.addition_info.state)


@dp.message_handler(state=QuestionnaireState.addition_info)
async def addition_info(m: types.Message, state: FSMContext):
    await state.update_data(addition_info=m.text)
    c_d = await state.get_data()

    message = f"@{m.from_user.username}\n\n" \
              f"1. –ò–º—è: {c_d['name']}\n" \
              f"2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {c_d['contact_phone']}\n" \
              f"3. –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {c_d['city_life']}\n" \
              f"4. –ì–æ—Ä–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è: {c_d['city_open']}\n" \
              f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {c_d['addition_info']}"

    await state.finish()
    await dp.bot.send_message(913406182, message)
    await m.answer("üì©–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–Ω—á–∞–π–∑–∏–Ω–≥-–º–µ–Ω–µ–¥–∂–µ—Ä—É!\n\n"
                   "üîª–ê–Ω–∫–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 19:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                   "üîª–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Ñ—Ä–∞–Ω—á–∞–π–∑–∏–Ω–≥-–º–µ–Ω–µ–¥–∂–µ—Ä!\n\n"
                   "‚ùóÔ∏è–ù–∞–º –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤—ã –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è - –ø–æ—ç—Ç–æ–º—É –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 24 —á–∞—Å–æ–≤, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –º–∏–Ω–∏-–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!")
    await UsersData.filter(tg_id=m.from_user.id).delete()
    await UsersData.create(tg_id=m.from_user.id,
                           name=c_d['name'],
                           contact_phone=c_d['contact_phone'],
                           city_life=c_d['city_life'],
                           city_open=c_d['city_open'],
                           addition_info=c_d['addition_info'])
    await TimeUsers.filter(tg_id=m.from_user.id).delete()
    await UserFlag.filter(tg_id=m.from_user.id).delete()
    await TimeUsers.create(tg_id=m.from_user.id,
                           time_int=time.time())


@dp.callback_query_handler(text="response:yes")
async def response_yes(c: types.CallbackQuery):
    await c.message.answer("üëè –ó–¥–æ—Ä–æ–≤–æ! –†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É")


@dp.callback_query_handler(text="response:no")
async def response_no(c: types.CallbackQuery):
    await c.message.answer("‚ö†Ô∏è–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ. –°–µ–π—á–∞—Å –∂–µ –ø–µ—Ä–µ–¥–∞–¥–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤–Ω–æ–≤—å!")
    db_user = await UsersData.filter(tg_id=c.from_user.id).first()

    message = f"–° @{c.from_user.username} –Ω–µ —Å–≤—è–∑–∞–ª–∏—Å—å, –∞ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤!\n\n" \
              f"1. –ò–º—è: {db_user.name}\n" \
              f"2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {db_user.contact_phone}" \
              f"3. –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {db_user.city_life}" \
              f"4. –ì–æ—Ä–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è: {db_user.city_open}" \
              f"5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {db_user.addition_info}"

    await dp.bot.send_message(1693556789, message)
