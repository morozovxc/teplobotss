from aiogram import types

from data.config import admin_ids
from db import ShopsData
from handlers.users.help import CheckOrBuyBTNs
from loader import dp

from openpyxl import load_workbook


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
@dp.message_handler(content_types="document")
async def upload_db_shops(m: types.Message):
    print('–∑–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–æ–≤')
    if m.from_user.id in admin_ids:
        load_message = await m.answer(
            "–ù–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤...",
        )
        try:
            await ShopsData.all().delete()
            file = await dp.bot.get_file(m.document.file_id)
            await dp.bot.download_file(file.file_path, "base.xlsx")
            wb = load_workbook("base.xlsx")
            sheet = wb.active
            for cells in sheet.iter_rows():
                item = [cell for cell in cells]

                await ShopsData.create(city=item[0].value,
                                       district=item[1].value,
                                       street=item[2].value,
                                       link=f"https://t.me/{str(item[3].value)[1:]}",
                                       link_card_ya="https://yandex.ru/maps/-/CDDx5Xmy",
                                       link_card_2gis="https://go.2gis.com/syq0a")

            await dp.bot.edit_message_text(
                "–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                chat_id=m.chat.id,
                message_id=load_message.message_id
            )
        except Exception as e:
            await dp.bot.edit_message_text(
                "–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                chat_id=m.chat.id,
                message_id=load_message.message_id
            )
            await m.answer(f'{e}')


@dp.callback_query_handler(text_startswith="check_or_buy")
async def check_or_buy(c: types.CallbackQuery):
    m_id = str(c.data).split(":")[1]
    await dp.bot.edit_message_text(text="ü§î –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –≥–æ—Ä–æ–¥:",
                                   chat_id=c.from_user.id,
                                   message_id=m_id,
                                   reply_markup=await CheckOrBuyBTNs.get_cities(m_id=m_id))


@dp.callback_query_handler(text_startswith="city")
async def get_city_take_district(c: types.CallbackQuery):
    city = str(c.data).split(":")[1]
    m_id = str(c.data).split(":")[2]
    await dp.bot.edit_message_text(text="ü§ûüèª–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º —Ä–∞–π–æ–Ω –∏–ª–∏ —É–ª–∏—Ü—É:",
                                   chat_id=c.from_user.id,
                                   message_id=m_id,
                                   reply_markup=await CheckOrBuyBTNs.get_district(city=city, m_id=m_id))


@dp.callback_query_handler(text_startswith="district")
async def get_district_take_street(c: types.CallbackQuery):
    district = str(c.data).split(":")[1]
    m_id = str(c.data).split(":")[2]
    await dp.bot.edit_message_text(text="‚ú¥Ô∏è–ö–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –±–ª–∏–∂–µ –≤—Å–µ—Ö?",
                                   chat_id=c.from_user.id,
                                   message_id=m_id,
                                   reply_markup=await CheckOrBuyBTNs.get_street(district=district, m_id=m_id))


@dp.callback_query_handler(text_startswith="street")
async def get_street_take_links(c: types.CallbackQuery):
    street = str(c.data).split(":")[1]
    m_id = str(c.data).split(":")[2]
    print(street)
    await dp.bot.edit_message_text(text=f"<b>{street}</b>\n\n"
                                        f"–ù–∞–ø–∏—Å–∞—Ç—å –∏ —Å–ø—Ä–æ—Å–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ –º–æ–∂–Ω–æ –Ω–∏–∂–µ, —Ç–∞–∫–∂–µ —è –¥–∞–º –≤–∞–º –ø–∞—Ä—É —Å—Å—ã–ª–æ–∫ –¥–ª—è "
                                        f"–ø–æ–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö",
                                   chat_id=c.from_user.id,
                                   message_id=m_id,
                                   reply_markup=await CheckOrBuyBTNs.get_links(street=street, m_id=m_id))
