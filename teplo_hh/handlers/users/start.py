import datetime
import time

from aiogram import types
from aiogram.dispatcher import FSMContext

from db import Users, TimeUsers, UsersData, UserFlag
from handlers.users.help import questionnarium
from keyboards import StartIKB, rkb_gender
from loader import dp
from state import QuestionnaireState


@dp.message_handler(commands=['start'])
@dp.message_handler(commands=['start'], state=QuestionnaireState.states)
async def start(m: types.Message, state: FSMContext):
    if await Users.filter(tg_id=m.from_user.id).first() is None:
        await Users.create(tg_id=m.from_user.id)
    await state.finish()
    await m.answer_photo(photo="https://7bdd6e9d-5639-4742-b439-36560b2a5ee9.selstorage.ru/hr_start.jpg",
                         caption="TEPLO - —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç—ë—Ç –∏ –ø–æ—ç—Ç–æ–º—É –º—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –∫–∞–¥—Ä–æ–≤!\n\n"
                                 "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É:", reply_markup=StartIKB.ikb)


@dp.callback_query_handler(text="go_quests")
async def go_quests(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(QuestionnaireState.name.state)
    await c.message.answer(questionnarium["name"])


@dp.message_handler(state=QuestionnaireState.name)
async def name(m: types.Message, state: FSMContext):
    await state.update_data(name=m.text)
    await state.set_state(QuestionnaireState.contact_number.state)
    await m.answer(questionnarium["contact_number"])


@dp.message_handler(state=QuestionnaireState.contact_number)
async def contact_number(m: types.Message, state: FSMContext):
    await state.update_data(contact_number=m.text)
    await state.set_state(QuestionnaireState.gender.state)
    await m.answer(questionnarium["gender"], reply_markup=rkb_gender())


@dp.message_handler(state=QuestionnaireState.gender)
async def gender(m: types.Message, state: FSMContext):
    await state.update_data(gender=m.text)
    await state.set_state(QuestionnaireState.place_of_residence.state)
    await m.answer(questionnarium["place_of_residence"])


@dp.message_handler(state=QuestionnaireState.place_of_residence)
async def place_of_residence(m: types.Message, state: FSMContext):
    await state.update_data(place_of_residence=m.text)
    await state.set_state(QuestionnaireState.date_of_birth.state)
    await m.answer(questionnarium["date_of_birth"])


@dp.message_handler(state=QuestionnaireState.date_of_birth)
async def date_of_birth(m: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    date_str = str(m.text)
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
        parts = date_str.split('.')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
        day = int(parts[0])
        month = int(parts[1])
        year = int(parts[2])
    except ValueError as e:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await m.answer(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}')
        await state.finish()
        return

    from datetime import date

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date = date.today()

    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    day = int(parts[0])
    month = int(parts[1])
    year = int(parts[2])
    birth_date = date(year, month, day)

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
    age = current_date.year - birth_date.year

    # –£—á–µ—Ç –º–µ—Å—è—Ü–µ–≤ –∏ –¥–Ω–µ–π
    if birth_date.month > current_date.month or \
            (birth_date.month == current_date.month and birth_date.day > current_date.day):
        age -= 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    if age < 18:
        await m.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –µ—â—ë –Ω–µ—Ç 18-—Ç–∏ –ª–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—Ä–∞–∑—É –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è)')
        await state.finish()
        return

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    await state.update_data(date_of_birth=m.text)
    await state.set_state(QuestionnaireState.minor_children.state)
    await m.answer(questionnarium["minor_children"])


@dp.message_handler(state=QuestionnaireState.minor_children)
async def minor_children(m: types.Message, state: FSMContext):
    await state.update_data(minor_children=m.text)
    await state.set_state(QuestionnaireState.criminal.state)
    await m.answer(questionnarium["criminal"])


@dp.message_handler(state=QuestionnaireState.criminal)
async def criminal(m: types.Message, state: FSMContext):
    await state.update_data(criminal=m.text)
    await state.set_state(QuestionnaireState.education.state)
    await m.answer(questionnarium["education"])


@dp.message_handler(state=QuestionnaireState.education)
async def education(m: types.Message, state: FSMContext):
    await state.update_data(education=m.text)
    await state.set_state(QuestionnaireState.russian_citizenship.state)
    await m.answer(questionnarium["russian_citizenship"])


@dp.message_handler(state=QuestionnaireState.russian_citizenship)
async def russian_citizenship(m: types.Message, state: FSMContext):
    print(m.text)
    await state.update_data(russian_citizenship=m.text)
    c_d = await state.get_data()

    message = f"@{m.from_user.username}\n\n" \
              f"1. –ò–º—è: {c_d['name']}\n" \
              f"2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {c_d['contact_number']}\n" \
              f"3. –ü–æ–ª: {c_d['gender']}\n" \
              f"4. –ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {c_d['place_of_residence']}\n" \
              f"5. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {c_d['date_of_birth']}\n" \
              f"6. –ï—Å—Ç—å –ª–∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ –¥–µ—Ç–∏: {c_d['minor_children']}\n" \
              f"7. –°—É–¥–∏–º–æ—Å—Ç—å: {c_d['criminal']}\n" \
              f"8. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {c_d['education']}\n" \
              f"9. –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {c_d['russian_citizenship']}"

    await state.finish()
    await dp.bot.send_message(875572761, message)
    await m.answer("üéØ–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ HR-–º–µ–Ω–µ–¥–∂–µ—Ä—É!\n\n"
                   "üîª–ê–Ω–∫–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 19:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                   "üîª–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à HR-–º–µ–Ω–µ–¥–∂–µ—Ä.\n\n"
                   "‚ùóÔ∏è–ù–∞–º –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤—ã –Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è - –ø–æ—ç—Ç–æ–º—É –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 24 —á–∞—Å–æ–≤, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –º–∏–Ω–∏-–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞!")
    await UsersData.filter(tg_id=m.from_user.id).delete()
    await UsersData.create(tg_id=m.from_user.id,
                           name=c_d['name'],
                           contact_number=c_d['contact_number'],
                           gender=c_d['gender'],
                           place_of_residence=c_d['place_of_residence'],
                           date_of_birth=c_d['date_of_birth'],
                           minor_children=c_d['minor_children'],
                           criminal=c_d['criminal'],
                           education=c_d['education'],
                           russian_citizenship=c_d['russian_citizenship'])
    await TimeUsers.filter(tg_id=m.from_user.id).delete()
    await UserFlag.filter(tg_id=m.from_user.id).delete()
    await TimeUsers.create(tg_id=m.from_user.id,
                           time_int=time.time())


@dp.callback_query_handler(text="response:yes")
async def response_yes(c: types.CallbackQuery):
    await c.message.answer("üëè –ó–¥–æ—Ä–æ–≤–æ! –†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É")


@dp.callback_query_handler(text="response:no")
async def response_no(c: types.CallbackQuery):
    await c.message.answer("‚ö†Ô∏è–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–∞–∫ –≤—ã—à–ª–æ. –°–µ–π—á–∞—Å –∂–µ –ø–µ—Ä–µ–¥–∞–¥–∏–º —Ç–≤–æ—é –∑–∞—è–≤–∫—É –≤–Ω–æ–≤—å!")
    db_user = await UsersData.filter(tg_id=c.from_user.id).first()

    message = f"–° @{c.from_user.username} –Ω–µ —Å–≤—è–∑–∞–ª–∏—Å—å, –∞ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤!\n\n" \
              f"1. –ò–º—è: {db_user.name}\n" \
              f"2. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {db_user.contact_number}\n" \
              f"3. –ü–æ–ª: {db_user.gender}\n" \
              f"4. –ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {db_user.place_of_residence}\n" \
              f"5. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {db_user.date_of_birth}\n" \
              f"6. –ï—Å—Ç—å –ª–∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ –¥–µ—Ç–∏: {db_user.minor_children}\n" \
              f"7. –°—É–¥–∏–º–æ—Å—Ç—å: {db_user.criminal}\n" \
              f"8. –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {db_user.education}\n" \
              f"9. –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –†–§: {db_user.russian_citizenship}"

    await dp.bot.send_message(875572761, message)
